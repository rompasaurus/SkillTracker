Steps Takens:
	12/31/2020
		Start IntelliJ > new project > spring initializer > create defaul project the generates from https://start.spring.io > next>
		
		Group: tools.teboraw
		Artifact: stracker
		Description: Skill Tracker
		next>
		
		Dependencies: check each
			developer tools > spring boot devtools
			sql > JPA, MySql and H2 and postgress
			web > web
		
		Create Git repo 
		
		Open git bash and commit and push project to nw repo 
			git init
			git add .
			git commit -m "first commit"
			git remote add origin https://github.com/rompasaurus/SkillTracker.git
			git push -u origin master
		
		Cloning existing project to new environment 
			open git console
			cd to proper directory 
			git clone https://github.com/rompasaurus/SkillTracker.git
			
		Master Branch should act as the stable branch that has past testing
		Create a new branch to act as the dev branch
			git branch dev
		
		
	01/09/2021
		Connecting to db config site 
			http://localhost:8080/h2-console/login
			
		Data Access objects in spring  example:
			package webproject.teboraw.stracker.domain;
			@Entity //indicates the class will be a table within the database and will be generated as such through spring boot
			public class Project {
				@Id
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				private Long id;
				private String projectName;
				private String projectIdentifier;
				private String description;
				private Date start_date;
				private Date end_date;

				private Date created_At;
				private Date updated_at;

				@PrePersist
				protected void onCreate(){
					this.created_At = new Date();
				}

				@PreUpdate
				protected void  onUpdate() {
					this.updated_at = new Date();
				}
				
		Controller api example
			@RestController
			@RequestMapping("/api/project")//this define the endpoint that needs to be request for the method to be excuted here
			public class ProjectController {
				@Autowired
				private ProjectService projectService;

				@PostMapping("")
				public ResponseEntity<Project> createNewProject(@RequestBody Project project) {
					return new ResponseEntity<>(project, HttpStatus.CREATED);
				}
			}
			
		Service spring example
			@RestController
			@RequestMapping("/api/project")//this define the endpoint that needs to be request for the method to be excuted here
			public class ProjectController {
				@Autowired
				private ProjectService projectService;

				@PostMapping("")
				public ResponseEntity<Project> createNewProject(@RequestBody Project project) {
					Project project1 = projectService.saveOrUpdateProject(project);
					return new ResponseEntity<>(project, HttpStatus.CREATED);
				}
			}

			
		Testing api endpoints in soap 
			create a new project test 
			select post > Body > raw w/ JSON selected in dropdown 
			in the body	:
				{
				"projectName": "Test",
				"ProjectIdentifier": "IDTE",
				"description":"a new project"
				}	

		Adding Data Validation:
			Annotations can be added to the entity dao with messages to explicitly only allow non empty, data etc data to be submited
			
			by default spring doesnt include validation in the pom 
			        <dependency>
						<groupId>javax.validation</groupId>
						<artifactId>validation-api</artifactId>
						<version>2.0.1.Final</version>
					</dependency>
			was added to allow for this 
			
			Examples of validation
				@Id
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				private Long id;
				@NotBlank(message = "Project name is required")
				private String projectName;
				@NotBlank(message = "Project Identifier is required")
				@Size(min = 4, max = 5, message = "Please use 4 to 5 characters")
				@Column(unique = true, updatable = false)
				private String projectIdentifier;
				@NotBlank(message = "Bitch fill in the description")
				private String description;
				@JsonFormat(pattern = "yyyy-mm-dd")
				private Date start_date;
				@JsonFormat(pattern = "yyyy-mm-dd")
				private Date end_date;
				@JsonFormat(pattern = "yyyy-mm-dd")
				private Date created_At;
				@JsonFormat(pattern = "yyyy-mm-dd")
				private Date updated_at;